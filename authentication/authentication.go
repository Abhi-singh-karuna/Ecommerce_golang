package authentication

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"time"

	"github.com/Abhi-singh-karuna/Ronin/config"
	"github.com/Abhi-singh-karuna/Ronin/models"
	"github.com/dgrijalva/jwt-go"
	"github.com/gofiber/fiber/v2"
	"golang.org/x/crypto/bcrypt"
	"gopkg.in/mgo.v2/bson"
)

//------Created JWT secret key to verify the database using the token generated by the JWT-------//
var jwtWare = "gosecretkey"

var u = models.User{
	Email:    "email",
	Password: "password",
}

//-----------Created function getHash to generate encrcypted password------//
func getHash(pwd []byte) string {
	hash, err := bcrypt.GenerateFromPassword(pwd, bcrypt.MinCost)
	if err != nil {
		log.Println(err)
	}
	return string(hash)
}

//-----------Create function GenerateJWT to generate the JWT token for the authentication------//
func GenerateJWT() (string, error) {
	token := jwt.New(jwt.SigningMethodHS256)
	tokenString, err := token.SignedString(jwtWare)
	if err != nil {
		log.Println("Error in JWT token generation")
		return "", err
	}
	return tokenString, nil
}

//-----------Signup function to register user------//
func SignUp(c *fiber.Ctx) error {

	user := new(models.User)
	err := c.BodyParser(user)
	if err != nil {
		return err
	}

//-----------------------Password Encryption---------------------//
	user.Password = getHash([]byte(user.Password))

	collection := config.MI.DB.Collection(os.Getenv("DATABASE_COLLECTION"))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	if cancel == nil {
		return nil
	}

//------------Email Validation Using regular expression----------//
	ValidateEmail := user.Email

	CheckEmail := regexp.MustCompile(`^[a-z0-9._\-]+@[a-z0-9\-]+\.[a-z]{2,4}$`)

	Check := (CheckEmail.MatchString(ValidateEmail))


	if Check == true {

//-----------Checking if email exist or not in the database------//
		err1 := collection.FindOne(ctx, bson.M{"email": user.Email}).Err()

		if err1 == nil {
			response := models.Response{
				Message: "Email already in use",
			}
			return c.JSON(response)
		}

//-----------Checking if username exist or not in the database------//
		err2 := collection.FindOne(ctx, bson.M{"username": user.Username}).Err()
		if err2 == nil {
			response := models.Response{
				Message: "Username already in use",
			}
			return c.JSON(response)
		}

//-----------Inserting the registered user in the database------//
		result, _ := collection.InsertOne(ctx, user)

		if result != nil {
			fmt.Println("User Registered")
		}

		return c.JSON(fiber.Map{
			"message": true,
		})

	}
	return c.JSON(fiber.Map{
		"message": false,
	})
}

//--------------------Created CreateToken function-------------------//
func CreateToken(userMail string) (string, error) {
	var err error
	claims := jwt.MapClaims{}
	claims["authorized"] = true

//--------------------Token claims to useremail-------------------//
	claims["user_mail"] = userMail

//--------------------Token Expiration time (Not Secure Method) -------------------//
	claims["exp"] = time.Now().Add(time.Minute * 5).Unix()

//--------------------Validate token for signing in user-------------------//
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	t, err := token.SignedString([]byte("gosecretkey"))
	if err != nil {
		return "", err
	}
	return t, nil
}

//--------------------Created Login function-------------------//
func Login(c *fiber.Ctx) error {

	user := new(models.User)
	var dbUser models.User

	err := c.BodyParser(user)
	if err != nil {
		return err
	}

	collection := config.MI.DB.Collection(os.Getenv("DATABASE_COLLECTION"))
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)

	if cancel == nil {
		return nil
	}
//--------------------Checking if user login email exist in the database-------------------//
	err = collection.FindOne(ctx, bson.M{"email": user.Email}).Decode(&dbUser)

	if err != nil {
		return err
	}

//-----------------------Checking the password entered is correct or not for the given login email---------------------//
	userPass := []byte(user.Password)
	dbPass := []byte(dbUser.Password)

	passErr := bcrypt.CompareHashAndPassword(dbPass, userPass)

	if passErr != nil {
		log.Println(passErr)
		fmt.Println("Wrong Password")
	}

//-----------------------Genrating token for verified user login with the GenerateJWT function---------------------//
	token, err := CreateToken(u.Email)
	if err != nil {
		c.JSON(http.StatusUnprocessableEntity)
		return err
	}
	c.JSON(token)
	return nil
}